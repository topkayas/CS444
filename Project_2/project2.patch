diff -Naur old/Kconfig.iosched new/Kconfig.iosched
--- old/Kconfig.iosched	2016-04-27 19:15:54.218680759 -0700
+++ new/Kconfig.iosched	2016-04-27 19:31:13.405298262 -0700
@@ -1,6 +1,7 @@
 if BLOCK
 
 menu "IO Schedulers"
+
 config IOSCHED_NOOP
 	bool
 	default y
@@ -31,6 +32,17 @@
 
 	  This is the default I/O scheduler.
 
+config IOSCHED_LOOK
+	tristate "Shortest Seek Time First I/O Scheduler"
+	default y
+	---help---
+	  This is the LOOK I/O Scheduler.
+	  This algorithm is called Look, it checks ahead to see if there are 
+	  any requests pending in the direction of head movement. If no requests are pending
+	  in the direction of head movement, then the disk head traversal reverses. It 
+	  reads/writes starting from head to end of the requests in increasing order then
+	  it goes back to the lowest request once it reaches the highest.
+
 config CFQ_GROUP_IOSCHED
 	bool "CFQ Group Scheduling support"
 	depends on IOSCHED_CFQ && BLK_CGROUP
@@ -54,14 +66,16 @@
 	config DEFAULT_NOOP
 		bool "No-op"
 
-endchoice
+	config DEFAULT_LOOK
+		bool "Look" if IOSCHED_LOOK=y
+endchoice	
 
 config DEFAULT_IOSCHED
 	string
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
-
+	default "look" if DEFAULT_LOOK
 endmenu
 
 endif
diff -Naur old/Makefile new/Makefile
--- old/Makefile	2016-04-27 19:15:59.610772315 -0700
+++ new/Makefile	2016-04-27 19:18:21.840187247 -0700
@@ -1,5 +1,5 @@
 #
-# Makefile for the kernel block layer
+#Makefile for the kernel block layer
 #
 
 obj-$(CONFIG_BLOCK) := elevator.o blk-core.o blk-tag.o blk-sysfs.o \
@@ -16,6 +16,7 @@
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_LOOK)	+= sstf-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
diff -Naur old/sstf-iosched.c new/sstf-iosched.c
--- old/sstf-iosched.c	1969-12-31 16:00:00.000000000 -0800
+++ new/sstf-iosched.c	2016-04-28 14:00:36.539103764 -0700
@@ -0,0 +1,219 @@
+/*
+ * Sinan Topkaya
+ * CS444
+ * Spring 2016
+ * Assignment 2
+ * Referances: https://piazza.com/class/imi4gsb35xa6sw?cid=57, http://stackoverflow.com/questions/28924282/linux-kernel-printk-to-a-file, http://www.cs.iit.edu/~cs561/cs450/disksched/disksched.html, http://suraj1693.blogspot.com/2013/11/program-to-implement-sstf-disk.html
+ */
+
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+
+
+struct look_data {
+	struct list_head queue;
+	sector_t head_position;
+	int direction;
+};
+
+static void look_merged_requests(struct request_queue *q, struct request *rq, struct request *next){
+	list_del_init(&next->queuelist);
+}
+
+static int look_dispatch(struct request_queue *q, int force)
+{
+
+	struct look_data *nd = q->elevator->elevator_data;
+    	//
+	trace_printk( "Here is the start of dispatch\n");
+	//
+	if(!list_empty(&nd->queue))
+    	{
+        	struct request *next_req, *prev_req, *req;
+ 		next_req = list_entry(nd->queue.next, struct request, queuelist);
+		prev_req = list_entry(nd->queue.prev, struct request, queuelist);
+
+      		if(prev_req == next_req)
+        	{
+			
+            		trace_printk("One request\n");
+            		
+            		req = next_req;   
+        	}
+        	else
+        	{
+            		//
+			trace_printk("Mutliple requests\n"); 
+			//
+			if(nd->direction == 1)
+            		{
+                		
+				trace_printk("Going forward\n");
+ 				
+				if(next_req->__sector > nd->head_position)
+                		{
+					req = next_req;
+                		}
+				else
+                		{
+                   		nd->direction = 0;
+                    		req = prev_req;
+                		}
+            		}
+			else
+            		{
+				//
+                		trace_printk("Going backward\n");
+				//
+				if(prev_req->__sector < nd->head_position)
+                		{
+					req = prev_req;
+                		}
+				else
+                		{
+					nd->direction = 1;
+                    			req = next_req;
+                		}
+            		}
+        	}
+		//
+		trace_printk("Executing\n"); 
+		//
+		list_del_init(&req->queuelist);
+		nd->head_position = blk_rq_pos(req) + blk_rq_sectors(req);
+		elv_dispatch_add_tail(q, req);
+		//
+        	trace_printk("Done Executing\n");
+        	trace_printk("Sinan's LOOK accessing %llu\n",(unsigned long long) req->__sector);
+        	//
+		return 1;
+
+    	}
+	   
+    	return 0;
+}
+
+static void look_add_request(struct request_queue *q, struct request *rq)
+{
+	
+	struct look_data *nd = q->elevator->elevator_data;
+    	struct request *next_req, *prev_req;
+ 	//
+	trace_printk("Starting add\n");
+	//
+	if(list_empty(&nd->queue))
+    	{
+		//
+        	trace_printk("List is empty\n");
+		//
+		list_add(&rq->queuelist, &nd->queue);
+    	}
+    	else
+    	{
+		//
+        	trace_printk("Finding place for request\n");
+	  	//
+		next_req = list_entry(nd->queue.next, struct request, queuelist);
+        	prev_req = list_entry(nd->queue.prev, struct request, queuelist);
+		while(blk_rq_pos(rq) > blk_rq_pos(next_req))
+        	{
+            		next_req = list_entry(next_req->queuelist.next, struct request, queuelist);
+            		prev_req = list_entry(prev_req->queuelist.prev, struct request, queuelist);
+        	}
+
+		list_add(&rq->queuelist, &prev_req->queuelist);
+        //	
+		trace_printk("Found it\n");
+    	//
+	}
+	//
+    	trace_printk("Sinan's LOOK adding %llu\n", (unsigned long long) rq->__sector);
+	//
+}
+
+static struct request * look_former_request(struct request_queue *q, struct request *rq)
+{
+	struct look_data *nd = q->elevator->elevator_data;
+	if(rq->queuelist.prev == &nd->queue)
+        return NULL;
+    	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request * look_latter_request(struct request_queue *q, struct request *rq)
+{
+    	struct look_data *nd = q->elevator->elevator_data;
+	if(rq->queuelist.next == &nd->queue)
+        return NULL;
+    	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int look_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+    	struct look_data *nd;
+    	struct elevator_queue *eq;
+	
+	eq = elevator_alloc(q, e);
+    	if(!eq)
+        	return -ENOMEM;
+
+    	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+    	if(!nd)
+    	{
+       		kobject_put(&eq->kobj);
+        	return -ENOMEM;
+    	}
+  
+	nd->head_position = 0;
+    	eq->elevator_data = nd;
+
+    	INIT_LIST_HEAD(&nd->queue);
+    	spin_lock_irq(q->queue_lock);
+    	q->elevator = eq;
+    	spin_unlock_irq(q->queue_lock);
+    	return 0;
+}
+
+static void look_exit_queue(struct elevator_queue *e)
+{
+	
+	struct look_data *nd = e->elevator_data;
+
+    	BUG_ON(!list_empty(&nd->queue));
+    	kfree(nd);
+}
+
+static struct elevator_type elevator_look = {
+	.ops = {
+        	.elevator_merge_req_fn = look_merged_requests,
+        	.elevator_dispatch_fn = look_dispatch,
+        	.elevator_add_req_fn = look_add_request,
+        	.elevator_former_req_fn = look_former_request,
+        	.elevator_latter_req_fn = look_latter_request,
+        	.elevator_init_fn = look_init_queue,
+        	.elevator_exit_fn = look_exit_queue,
+    	},
+    	.elevator_name = "look",
+    	.elevator_owner = THIS_MODULE,
+
+};
+
+static int __init look_init(void)
+{
+	return elv_register(&elevator_look);
+}
+
+static void __exit look_exit(void)
+{
+	elv_unregister(&elevator_look);
+}
+
+module_init(look_init);
+module_exit(look_exit);
+
+
+MODULE_AUTHOR("Sinan Topkaya");
+MODULE_LICENSE("Oregon State University");
+MODULE_DESCRIPTION("LOOK IO scheduler");
